//QUERY GET INSTANCES
WITH 'Movie' as modelName
// Get Model
MATCH (m:Model{name:modelName})
// Get Model keys
OPTIONAL MATCH (k:Key)<-[:HAS_KEY]-(m)
// Get keys from Models that selected model extends
OPTIONAL MATCH (pk:Key)<-[:HAS_KEY]-(:Model)<-[:EXTENDS*..]-(m)
WITH m,k, pk
UNWIND [k,pk] as key
WITH DISTINCT m, key
// Get the Models equivalent to the selected model
OPTIONAL MATCH (equivalent:Model)<-[:IS_EQUIVALENT]-(m)
WITH m, equivalent, key
UNWIND [m, equivalent] as mod
// Get every child Model from selected model and equivalents
OPTIONAL MATCH (child:Model)-[:EXTENDS*..]->(mod)
WITH mod, child, key
UNWIND [mod, child] as model
// Get instances from selected model, equivalents and children model
MATCH (instance:Instance)-[:IS_INSTANCE_OF]->(model)
WITH DISTINCT model,instance, key
// Get direct KeyValuePairs from instances
OPTIONAL MATCH (key)<-[:HAS_KEY]-(kvp:KeyValuePair)<-[:HAS_KEYVALUE_PAIR]-(instance)
// Get mapped KeyValuePairs from instances
OPTIONAL MATCH (key)-[:IS_EQUIVALENT*..]-(original_key:Key)<-[:HAS_KEY]-(mapped_kvp:KeyValuePair)<-[:HAS_KEYVALUE_PAIR]-(instance)
WITH kvp, mapped_kvp, key,original_key,instance, model
UNWIND [kvp, mapped_kvp] as kvps
WITH DISTINCT model, instance, kvps, key, original_key
// Get KeyValuePair for each instance
MATCH (kvps)-[:HAS_VALUE]->(v:Instance)
// Get instance Model (no model means that the instance is a primitive) 
OPTIONAL MATCH (v)-[:IS_INSTANCE_OF]->(vm:Model)
// If the instance is a primitive the value is the id of the instance else the value is a reference to another instance
WITH original_key,key, vm,{id:instance.id, model:model.name} as instanceInfo, collect (CASE WHEN vm IS NULL THEN v.id ELSE {id:v.id} END) as values 
// return a JSON collection representing each instance with properties
RETURN {
		instance:instanceInfo,
		properties: collect ({
								key:key.name,
								originalKey: original_key.name,
								model:vm.name,
								values:values,
								isArray: CASE WHEN original_key IS NOT NULL 
										 THEN (original_key.isArray IS NOT NULL AND original_key.isArray) 
										 ELSE ((key.isArray IS NOT NULL) AND key.isArray) 
										 END
								})
		} as instances 
ORDER BY instances.instance.id


//QUERY CREATE MODEL AND INSTANCES

WITH [
    {
        name: 'Date',
        keys: [{name: 'year', type: 'number'}, {name: 'month', type: 'number'}, {name: 'day', type: 'number'}],
        instances: [
          {id: '1964-9-2', properties: [{key: 'year', values: [1964]}, {key: 'month', values: [9]}, {key: 'day', values: [2]}]},
          {id: '1964-8-27', properties: [{key: 'year', values: [1964]}, {key: 'month', values: [8]}, {key: 'day', values: [27]}]}
        ]
    },
    {
        name: 'Person',
        keys: [{name: 'firstName', type: 'string'}, {name: 'surname', type: 'string'}, {name: 'dob', type: 'object', model: 'Date'}],
        instances: [
          {id: 'p1', properties: [{key: 'firstName', values: ['Keanu']}, {key: 'surname', values: ['Reeves']}, {key: 'dob', values: ['1964-9-2']}]},
          {id: 'p2', properties: [{key: 'firstName', values: ['Emma']}, {key: 'surname', values: ['Watson']}]},
          {id: 'p3', properties: [{key: 'firstName', values: ['Daniel']}, {key: 'surname', values: ['Radcliffe']}]},
          {id: 'p4', properties: [{key: 'firstName', values: ['Carie-Anne']}, {key: 'surname', values: ['Moss']}]},
          {id: 'p5', properties: [{key: 'firstName', values: ['Herman']}, {key: 'surname', values: ['Melville']}]},
          {id: 'p6', properties: [{key: 'firstName', values: ['Julie']}, {key: 'surname', values: ['Andrews']}]}
        ]
      },
      {
        name: 'Role',
        keys: [{name: 'character', type: 'string'}, {name: 'actor', type: 'object', model: 'Person'}],
        instances: [
          {id: 'r1', properties: [{key: 'character', values: ['Neo']}, {key: 'actor', values: ['p1']}]},
          {id: 'r2', properties: [{key: 'character', values: ['Hermione Granger']}, {key: 'actor', values: ['p2']}]},
          {id: 'r3', properties: [{key: 'character', values: ['Harry Potter']}, {key: 'actor', values: ['p3']}]},
          {id: 'r4', properties: [{key: 'character', values: ['Trinity']}, {key: 'actor', values: ['p4']}]},
          {id: 'r5', properties: [{key: 'character', values: ['Kevin Lomax']}, {key: 'actor', values: ['p1']}]},
          {id: 'r6', properties: [{key: 'character', values: ['Mary Poppins']}, {key: 'actor', values: ['p6']}]}
        ]
      },
      {
        name: 'Media',
        keys: [{name: 'title', type: 'string'}, {name: 'releaseDate', type: 'object', model: 'Date'}]
      },
      {
        name: 'Movie',
        extends: ['Media'],
        keys: [{name: 'roles', isArray: true, type: 'object', model: 'Role'}],
        instances: [
          {id: 'm1', properties: [{key: 'title', values: ['The Matrix']}, {key: 'roles', values: ['r1', 'r4']}]},
          {id: 'm2', properties: [{key: 'title', values: ['Harry Potter']}, {key: 'roles', values: ['r2', 'r3']}]},
          {id: 'm3', properties: [{key: 'title', values: ['The Devil"s Advocate']}, {key: 'roles', values: ['r5']}]},
          {id: 'm4', properties: [{key: 'title', values: ['Mary Poppins']}, {key: 'roles', values: ['r6']}, {key: 'releaseDate', values: ['1964-8-27']}]}
        ]
      },
      {
        name: 'Book',
        extends: ['Media'],
        keys: [{name: 'author', type: 'object', model: 'Person'}],
        instances: [
          {id: 'b1', properties: [{key: 'title', values: ['Moby Dick']}, {key: 'author', values: ['p5']}]}
        ]
      },
      {
        name: 'Item',
        isEquivalentTo: ['Media'],
        keys: [{name: 'name', isEquivalentTo: 'title', type: 'string'}],
        instances: [
          {id: 'i1', properties: [{key: 'name', values: ['Item 1']}]}
        ]
      }
    ]as models
UNWIND $models as model
WITH collect(model) as models, collect(model.name) as names
// Search for Models that are not represented in the specification
OPTIONAL MATCH (n:Model) WHERE NOT n.name IN names
OPTIONAL MATCH (n)-[r1]-()
// Search instances  of models that are not represented in the specification
OPTIONAL MATCH (n)<-[:IS_INSTANCE_OF]-(i:Instance)-[r2]-()
// Remove models and their relationships to instances that are not represented in the specification
DELETE r2, r1, n
WITH models
UNWIND models as model
// Create models from specification when it doesn't exist
MERGE (m:Model{name:model.name})
WITH model, m
// Remove equivalency relationships that are not defined in the specification
OPTIONAL MATCH (m)-[r:IS_EQUIVALENT]->(em:Model) WHERE model.isEquivalentTo IS NULL OR  NOT em.name in model.isEquivalentTo
DELETE r
WITH DISTINCT model, m
OPTIONAL MATCH (em:Model) WHERE em.name in model.isEquivalentTo
// Create equivalency relationships from the specification
MERGE (m)-[:IS_EQUIVALENT]->(em)
WITH DISTINCT model, m
UNWIND model.keys as key
// Create model keys from the specification
MERGE (k:Key{name:key.name, isArray: CASE WHEN key.isArray IS NOT NULL THEN key.isArray ELSE false END})
MERGE (t:Type{name:key.type})
WITH model, m,k,t, key
// Remove key mapping relationships that are not defined in the specification
OPTIONAL MATCH (k)-[r:IS_EQUIVALENT]->(mk:Key) WHERE key.isEquivalentTo IS NULL OR  mk.name <> key.isEquivalentTo
DELETE r
WITH DISTINCT model, m,k,t, key
OPTIONAL MATCH (mk:Key) WHERE mk.name = key.isEquivalentTo
// Create mapping relationships from the specification
MERGE (k)-[:IS_EQUIVALENT]->(mk)
WITH DISTINCT model,m,k,t, key.model as modelType
MERGE (m)-[:HAS_KEY]->(k)
MERGE (k)-[:HAS_TYPE]->(t)
WITH model,m,k, modelType, t
// Remove key-type relationships that are not defined in the specification
OPTIONAL MATCH (k)-[r:HAS_TYPE]->(rt:Type) WHERE rt <> t
DELETE r
WITH DISTINCT model, m ,k, modelType
OPTIONAL MATCH (mt:Model{name:modelType})
// Create key types relationships from the specification
MERGE (k)-[:HAS_MODELTYPE]->(mt)
WITH DISTINCT model,m, collect (k.name) as keys
// Remove model-key relationships that are no defined in the specification
OPTIONAL MATCH (m)-[r:HAS_KEY]->(k:Key) WHERE NOT k.name in keys
DELETE r
WITH  DISTINCT model,m
UNWIND model.instances as instance
WITH DISTINCT model, m, collect(instance.id) as ids
// Remove model-instance relationships that are not defined in the specification
OPTIONAL MATCH (m)<-[r:IS_INSTANCE_OF]-(ri:Instance) WHERE NOT ri.id in ids
DELETE r
WITH  DISTINCT model
UNWIND model.instances as instance
MATCH (m:Model{name:model.name})
MERGE (i:Instance{id:instance.id})
// Create model-instance relationships that from the specification
MERGE (i)-[:IS_INSTANCE_OF]->(m)
WITH DISTINCT model, instance, i, m
UNWIND instance.properties as kvp
WITH DISTINCT model, instance, i, m, collect(kvp.key) as keys
// Remove instance-keyvaluepair relationships that are not defined in the specification
OPTIONAL MATCH (i)-[r:HAS_KEYVALUE_PAIR]->(rkvp:KeyValuePair)-[:HAS_KEY]->(k:Key) WHERE NOT k.name IN keys
DELETE r
WITH DISTINCT instance, i, m, model
// Remove model extension relationships that are not defined in the specification
OPTIONAL MATCH (m)-[r:EXTENDS]->(p:Model) WHERE model.extends IS NULL OR  NOT p.name in model.extends
DELETE r
WITH DISTINCT instance, i, m, model
OPTIONAL MATCH (p:Model) WHERE p.name in model.extends
// Create model extension relationships from the specification
MERGE (m)-[:EXTENDS]->(p) 
WITH DISTINCT instance, i, m, p
UNWIND [m, p] as model
WITH DISTINCT instance, i, model as m
UNWIND instance.properties as kvp
MATCH (k:Key{name:kvp.key})<-[:HAS_KEY]-(m)
WITH DISTINCT i,k, kvp.values as values
OPTIONAL MATCH (i)-[:HAS_KEYVALUE_PAIR]->(kvp:KeyValuePair)-[:HAS_KEY]->(k)
// Remove value-keyvaluepair relationships that are not defined in the specification
OPTIONAL MATCH (kvp)-[r2:HAS_VALUE]->(v:Instance) WHERE NOT v.id IN values 
DELETE r2
WITH DISTINCT i,k, values
UNWIND values as value
// Create primitives when doesn't exist
MERGE (inst:Instance{id:value}) 
// Create keyvaluepair relationships from the specification
MERGE (k)<-[:HAS_KEY]-(kvp:KeyValuePair)-[:HAS_VALUE]->(inst) 
// Create keyvaluepair-instance relationships
MERGE (i)-[:HAS_KEYVALUE_PAIR]->(kvp) 

// QUERY DELETE UNUSED OBJECTS
// Remove KeyValuePair objects that are not associated with any instance
OPTIONAL MATCH (n:KeyValuePair) WHERE NOT (n)<-[:HAS_KEYVALUE_PAIR]-(:Instance)-[:IS_INSTANCE_OF]->(:Model) 
OPTIONAL MATCH (n)-[r]-()
DELETE r, n
WITH {} as dummy
// Remove Key objects that are not referenced
OPTIONAL MATCH (n:Key) WHERE NOT (n)<-[:HAS_KEY]-() ed
OPTIONAL MATCH (n)-[r]-()
DELETE r, n
WITH {} as dummy
// Remove Type objects that are not referenced
OPTIONAL MATCH (n:Type) WHERE NOT (n)<-[:HAS_TYPE]-(:Key)
OPTIONAL MATCH (n)-[r]-()
DELETE r, n
WITH {} as dummy
// Remove Instance objects that are not referenced
OPTIONAL MATCH (n:Instance) WHERE NOT (n)<-[:HAS_VALUE]-(:KeyValuePair) AND NOT (n)-[:IS_INSTANCE_OF]->(:Model) 
OPTIONAL MATCH (n)-[r]-()
DELETE r, n

